-- NULL 처리
SELECT * FROM EMP e;
SELECT COMM*1.1 FROM emp;
SELECT * FROM emp;
SELECT NVL(COMM, 0) FROM emp;				-- NVL(해당열, 대체값)
SELECT NVL(COMM, 0)*1.2 FROM emp;
SELECT NVL2(COMM, COMM*1.1, 0) FROM emp;	-- NVL2 (해당열, 정상값, NULL이면 대체값)
-- DECODE 함수 : 조건에 따라서 값을 선택
SELECT EMPNO, ENAME, JOB, SAL,
DECODE( JOB,				-- 해당열
	'MANAGER', SAL*1.1,		-- 'MANAGER'가 적용되는 값
	'SALESMAN', SAL*1.05,	-- 'SALESMAN' 적용되는 값
	'ALALYST', SAL,			
	SAL * 1.03) AS UPSAL	-- 그외 나머지
FROM emp;

SELECT EMPNO, ENAME, JOB, SAL, 
CASE JOB
	WHEN 'MANAGER' THEN SAL*1.1
	WHEN 'SALESMAN' THEN SAL*1.5
	WHEN 'ALALYST' THEN SAL
	ELSE SAL*1.03
END AS UPSAL
FROM emp;

-- 행 제한하기
SELECT * FROM emp;
SELECT * FROM EMP WHERE ROWNUM <= 5;

-- 다중함수(집계함수) : SUM, MIN, MAX, COUNT, AVG
SELECT * FROM emp;
SELECT COUNT(ENAME) FROM emp;
SELECT COUNT(COMM) FROM emp;				-- NULL은 제외
SELECT COUNT(ENAME) FROM emp WHERE DEPTNO = 30;
SELECT SUM(COMM) FROM emp;
SELECT SUM(DISTINCT SAL),					-- 중복제거 
		SUM(ALL SAL),						-- 중복포함 전체
		SUM(SAL)							-- 중복포함 전체
FROM emp;
SELECT COUNT(SAL), 
		COUNT(ALL SAL),
		COUNT(DISTINCT SAL)
FROM emp;

SELECT MAX(SAL), MIN(SAL) FROM emp WHERE DEPTNO = 10;
-- 20번 부서에서 신입과 최고참의 입사일 조회
SELECT MIN(HIREDATE) "최고참", MAX(HIREDATE) "신입" FROM emp WHERE DEPTNO = 20;
-- 30번 부서의 월급 평균 조회
SELECT AVG(SAL) FROM emp WHERE DEPTNO = 30;

-- GROUP BY 
SELECT DEPTNO , JOB, AVG(SAL) FROM emp GROUP BY DEPTNO, JOB ORDER BY DEPTNO;
----(코딩순서) SELECT * FROM emp WHERE ~~ GROUP BY ~~ ORDER BY ~~ 
----(실행순서) FROM ~~ WHERE ~~ GROUP BY ~~ SELECT ~~ ORDER BY ~~
SELECT DEPTNO, JOB, AVG(SAL)
FROM EMP e 
WHERE AVG(SAL) >= 2000				-- WHERE절에서는 집계함수를 사용할 수 없다.
GROUP BY DEPTNO, JOB 
ORDER BY DEPTNO, JOB;

SELECT DEPTNO, JOB, AVG(SAL)
FROM EMP e 
--WHERE AVG(SAL) >= 2000				-- WHERE절에서는 집계함수를 사용할 수 없다.
GROUP BY DEPTNO, JOB
HAVING AVG(SAL) >= 2000
ORDER BY DEPTNO, JOB; 

SELECT DEPTNO, JOB, AVG(SAL)
FROM emp
WHERE SAL <= 3000
GROUP BY DEPTNO, JOB
HAVING AVG(SAL) >= 2000;

-- 오라클 조인
SELECT * FROM emp;
SELECT * FROM emp;
-- FROM절에서 테이블로 조인
SELECT * FROM emp, DEPT d ;
-- WHERE절에서 열이름 비교하는 조건식으로 조인
SELECT * FROM emp, DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO
ORDER BY EMPNO;

SELECT E.EMPNO, E.ENAME, D.DEPTNO, D.DNAME 
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO
ORDER BY D.DEPTNO;

SELECT E.EMPNO, E.NAME, D.DEPTNO, D.DNAME
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO AND SAL >= 3000;		-- 조인에 조건시 ㄱ추가



